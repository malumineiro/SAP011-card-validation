/* const { TestWatcher } = require("jest");
 */
const validator = {
  // function para mascarar o n√∫mero do cart√£o.
  // inspeciona se o n√∫mero do cart√£o tem  ou √© inferior a 4 d√≠gitos. Nesse caso, ele retorna o n√∫mero sem a mask.
  maskify: function (cc) {
    if (cc.length <= 4) {
      return cc;
    }
    const lastFourDigits = cc.slice(-4); // fatia os 4 d√≠gitos finais do n√∫mero do cart√£o.
    const masked = cc.slice(0, -4).replace(/./g, "#"); // gera uma string com m√°scara, substituindo todos os d√≠gitos, com excess√£o dos √∫ltimos 4, por "#".
    return masked + lastFourDigits; // retorna a string cifrada com mask reunida com os 4 d√≠gitos finais.
  },

  // function para validar o cart√£o de cr√©dito atrav√©s do algor√≠tmo de Luhn.
  isValid: function (cardNumber) {
    // analisa se o n√∫mero do card est√° vazio ou se est√° fora do intervalo v√°lido de comprimento (de 13 a 16 d√≠gitos). Nessas condi√ß√µes, retorna false.
 
    let sum = 0;
    let shouldDouble = false;
    for (let i = cardNumber.length - 1; i >= 0; i--) {
      let digit = parseInt(cardNumber.charAt(i));

      if (shouldDouble) {
        digit *= 2;
        if (digit > 9) {
          digit -= 9;
        }
      }

      sum += digit;
      shouldDouble = !shouldDouble;
    }
    //retorna true caso o resultado da soma seja divis√≠vel por 10 e false se n√£o for.
    return sum % 10 === 0;
  },
  
};

export default validator;

// const validator = {
// ...
//};

//export default validator;

//aqui voc√™ deve implementar o objeto validator, o qual j√° est√° exportado no boilerplate. Este objeto (validator) deve conter dois m√©todos:

// validator.isValid(creditCardNumber): creditCardNumber √© um string com o n√∫mero do cart√£o a ser verificado. Esta fun√ß√£o deve retornar um boolean, dependendo de sua validade, de acordo com o algoritmo de Luhn.

// validator.maskify(creditCardNumber): creditCardNumber √© um string com o n√∫mero do cart√£o e esta fun√ß√£o deve retornar um string onde todos, exceto os √∫ltimos quatro caracteres, s√£o substitu√≠dos por um n√∫mero (#) ou üê±. Essa fun√ß√£o deve sempre manter os quatro √∫ltimos caracteres intactos, mesmo quando o string for mais curto.

// Exemplo de uso:

// maskify('4556364607935616') === '############5616'
// maskify(     '64607935616') ===      '#######5616'
// maskify(               '1') ===                '1'
// maskify(               '')  ===                '' 